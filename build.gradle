plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.soap'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(8)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.ws:spring-ws-core:3.1.1'

	// JAXB and JAX-WS dependencies
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
	implementation 'javax.xml.ws:jaxws-api:2.3.1'
	implementation 'com.sun.xml.ws:jaxws-rt:2.3.1'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// WSDL Code Generation Using wsimport
task generateJaxb {
	doLast {
		// Define paths for input WSDL and XSD files and output directory
		def wsdlFile = file("${projectDir}/src/main/resources/wsdl")
		def xsdDir = file("${projectDir}/src/main/resources/xsd")
		def generatedSrcDir = file("${buildDir}/generated-sources")

		// Ensure the output directory exists
		if (!generatedSrcDir.exists()) {
			generatedSrcDir.mkdirs()
		}

		// Define paths for wsimport and xjc tasks
		def wsimportPath = "${System.getenv('JAVA_HOME')}/bin/wsimport"
		def xjcPath = "${System.getenv('JAVA_HOME')}/bin/xjc"

		// JAXB generation using wsimport
		exec {
			commandLine wsimportPath, '-keep', '-d', generatedSrcDir, '-p', 'com.soap.generated', "-extension", "${wsdlFile}/*.wsdl"
		}

		// XSD generation using xjc
		exec {
			commandLine xjcPath, '-d', generatedSrcDir, '-p', 'com.soap.generated', "${xsdDir}/*.xsd"
//			commandLine xjcPath, '-d', generatedSrcDir, '-p', 'com.soap.generated', "${xsdDir}"
		}
	}
}

// Create the source set for the generated Java files
task generateSources {
	dependsOn generateJaxb
}

sourceSets.main.java.srcDirs += file("${buildDir}/generated-sources")

// Make sure the generated sources are compiled before other Java sources
compileJava.dependsOn generateSources


// Ensure that JAXB classes are generated before compiling Java
tasks.named('compileJava') {
	dependsOn 'generateJaxb'
	source += file("${buildDir}/generated-sources")
}

tasks.named('test') {
	useJUnitPlatform()
}
