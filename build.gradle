plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.soap'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    provided
    // ✅ Define a custom resolvable configuration for XJC dependencies
    xjc {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom implementation
    }
}

repositories {
    mavenCentral()
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'com.sun.xml.bind', version: '4.0.3') {
            entry 'jaxb-impl'
            entry 'jaxb-xjc'
        }
        dependencySet(group: 'org.glassfish.jaxb', version: '4.0.3') {
            entry 'jaxb-runtime'
        }
        dependencySet(group: 'com.sun.xml.ws', version: '4.0.1') {
            entry 'jaxws-rt'
        }
        dependency 'wsdl4j:wsdl4j:1.6.2'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.ws:spring-ws-core:4.0.3'
    implementation 'org.springframework:spring-webflux:6.1.14'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.3'

    // XJC and WSDL dependencies (FIXED)
//    implementation 'com.sun.xml.bind:jaxb-impl'
//    implementation 'com.sun.xml.bind:jaxb-xjc'

    // ✅ Assign XJC dependencies to the `xjc` configuration
    xjc 'com.sun.xml.bind:jaxb-impl'
    xjc 'com.sun.xml.bind:jaxb-xjc'

    // Jakarta EE stack
    implementation 'wsdl4j:wsdl4j:1.6.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.3'
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:4.0.1'
    implementation('com.sun.xml.ws:jaxws-rt:4.0.1') {
        exclude group: 'com.sun.xml.ws', module: 'policy'
    }

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


def generatedSrcDir = file("${buildDir}/generated-sources")

task jaxb {
    doLast {
        generatedSrcDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.xjc.asPath // ✅ Use `xjc` configuration instead
        )

        ant.xjc(destdir: generatedSrcDir) {
            schema(dir: 'src/main/resources/xsd', includes: '**/*.xsd')
        }

        ant.xjc(destdir: generatedSrcDir) {
            schema(dir: 'src/main/resources/wsdl', includes: '**/*.wsdl')
            arg(value: "-wsdl")
        }
    }
}


task generateSources {
    dependsOn jaxb
}

sourceSets.main.java.srcDirs += generatedSrcDir

compileJava.dependsOn generateSources

tasks.named('compileJava') {
    dependsOn 'jaxb'
    source += fileTree(generatedSrcDir)
}

tasks.named('test') {
    useJUnitPlatform()
}
